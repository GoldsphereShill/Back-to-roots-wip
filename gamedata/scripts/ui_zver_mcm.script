--[[
Zver HUD
16/11/2020
Anomaly game scripts used as reference: item_weapon.script actor_status.script by Tronex
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
Author: RavenAscendant
--]]

--ammo display colors 

clr_list ={}

 clr_list = {
	["fmj_ammo"]		= {
		["new"]		=	{bright = GetARGB(255, 238, 155, 23), dark = GetARGB(150, 238, 155, 23)},
		["old"]		=	{bright = GetARGB(255, 235, 235, 235), dark = GetARGB(150, 235, 235, 235)},},
	
	["ap_ammo"]		= {
		["new"]		=	{bright = GetARGB(255, 238, 155, 23), dark = GetARGB(150, 238, 155, 23)},
		["old"]		=	{bright = GetARGB(255, 235, 235, 235), dark = GetARGB(150, 235, 235, 235)},},
	
	["third_ammo"]		= {
		["new"]		=	{bright = GetARGB(255, 238, 155, 23), dark = GetARGB(150, 238, 155, 23)},
		["old"]		=	{bright = GetARGB(255, 235, 235, 235), dark = GetARGB(150, 235, 235, 235)},}
	
}

	




-- Update rate
local tg_update = 0
local tg_update_step = 10 --[ms] lower hud is more snappy, higher it uses less cpu time.

--Status hud X/Y cord override
status_hud_x = 20
status_hud_y = 9
notify_icon_x = 190
notify_icon_y = 655


--settings defaults will be read from zver.ltx if it is available
 options = {
ammoshow = true,
oldammoshow = false,
rememberammo = false,	-- when true ammo won't clear until a different wepon is equipped. Problematic, disabled by default.
armorbar = true,		-- armor module enabled 
armortext = true, 		-- armor cond text dispalyed
weaponshow = true, 		-- weapon health module enabled
weapontext = true, 		-- weapon cond text displayed
weaponbarhide = true,	-- hide weapon bar when no weapon equiped
radhealthshow = true, 	-- radiation bar
bleedingbarshow = true, 	--bleeding state.
healingbar = true,
}

function loadsetting()
	
	local option_section = ui_mcm and "mcm" or "options"
	path = ui_mcm and "zver/" or "video/hud/" 
	--modules


	--armor condition bar option(s)
	
	options.ammoshow =axr_main.config:r_value(option_section,path.."ammoshow",1,options.ammoshow)
	options.weaponshow =axr_main.config:r_value(option_section,path.."weaponshow",1,options.weaponshow)
	options.armorbar = axr_main.config:r_value(option_section,path.."armorbar",1,options.armorbar)
	options.radhealthshow = axr_main.config:r_value(option_section,path.."radhealthshow",1,options.radhealthshow)
	options.bleedingbarshow = axr_main.config:r_value(option_section,path.."bleedingbarshow",1,options.bleedingbarshow)
	options.healingbar = axr_main.config:r_value(option_section,path.."healingbar",1,options.healingbar)


	--armor condition bar option(s)
	options.armortext = axr_main.config:r_value(option_section,path.."armortext",1,options.armortext)
	
	--weapon condition bar options
	options.weapontext = axr_main.config:r_value(option_section,path.."weapontext",1,options.weapontext)
	options.weaponbarhide = axr_main.config:r_value(option_section,path.."weaponbarhide",1,options.weaponbarhide)
	
	--ammocounter options
	options.oldammoshow = axr_main.config:r_value(option_section,path.."oldammoshow",1,options.oldammoshow)

--printf("zverhud weaponshow load post "..tostring(options.weaponshow))
	if HUD ~= nil then
		HUD:Refresh(true)
	end

end



----------------------------------
--	HUD (Zver)
----------------------------------

HUD = nil
------- UIZverHud is built on the skeleton of UIIndicators from actor_status.script
function activate_hud()
	RegisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	RegisterScriptCallback("on_console_execute",on_console_execute)
	RegisterScriptCallback("GUI_on_show",update_hud)
	RegisterScriptCallback("GUI_on_hide",update_hud)
	RegisterScriptCallback("actor_on_weapon_reload",update_ammo)
	
	
	if HUD == nil then
		HUD = UIZver()
		get_hud():AddDialogToRender(HUD)
	end
	HUD:Update(true)
end

function deactivate_hud()
	if HUD ~= nil then
		get_hud():RemoveDialogToRender(HUD)
		HUD = nil
	end
	
	UnregisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	UnregisterScriptCallback("on_console_execute",on_console_execute)
	UnregisterScriptCallback("GUI_on_show",update_hud)
	UnregisterScriptCallback("GUI_on_hide",update_hud)
	UnregisterScriptCallback("actor_on_weapon_reload",update_ammo)

end

function update_hud()
	if HUD ~= nil then
		HUD:Update(true)
	end
end

function update_ammo()
	if HUD ~= nil then
		HUD:UpdateAmmo()
	end
end

function actor_on_net_destroy()
	if HUD ~= nil then
		get_hud():RemoveDialogToRender(HUD)
		HUD = nil
	end
end

function on_console_execute(name)
	if name == "hud_draw" and HUD then
		HUD:Update(true)
	end
end

-------
class "UIZver" (CUIScriptWnd)

function UIZver:__init() super()
	
	self.ratio  = utils_xml.screen_ratio()
	self._tmr   = time_global()
	self.index  = 0
	self.W      = 40
	self.offset = 10
	self.lastwpn = 0

	
	
	self:InitControls()
end

function UIZver:__finalize()
end

function UIZver:InitControls()
	local xml  = CScriptXmlInit()
	xml:ParseFile("ui_zver_component.xml")

-- dialog is an invisible window that contains all the rest of the hud elements. It is hidden and shown to make ZverHUD behave like the in-game main hud as much as possible.
	self.dialog = xml:InitStatic("zver", self)
	self.dialog:Show(false)
	
-- the window containing the background texture for the ammo dispaly, because it won't be changed it won't be needed after setup so a temp local variable is used	
	self.ammowindow = xml:InitStatic("zver:ammo_display", self.dialog)
	
--these three statics are the text of the ammo counter. They are listed here in the order they appear in the ammo display from top to bottom
	self.third_ammo = xml:InitStatic("zver:ammo_display:third_ammo", self.ammowindow)	
	self.ap_ammo= xml:InitStatic("zver:ammo_display:ap_ammo", self.ammowindow)
	self.fmj_ammo = xml:InitStatic("zver:ammo_display:fmj_ammo", self.ammowindow)
--hide them for now
	self.third_ammo:Show(false)
	self.ap_ammo:Show(false)
	self.fmj_ammo:Show(false)
	
-- armor and weapon condition and radhealth bars
	self.armorwindow = xml:InitStatic("zver:armor_health", self.dialog )
	self.armorbar = xml:InitProgressBar("zver:armor_health:value", self.armorwindow)
	self.weaponwindow = xml:InitStatic("zver:weapon_health", self.dialog )	
	self.weaponbar = xml:InitProgressBar("zver:weapon_health:value", self.weaponwindow)
	self.radhealthwindow = xml:InitStatic("zver:rad_health", self.dialog )	
	self.radhealthbar = xml:InitProgressBar("zver:rad_health:value", self.radhealthwindow)
	self.bleedhealthwindow = xml:InitStatic("zver:bleeding_health", self.dialog )	
	self.bleedhealthbar = xml:InitProgressBar("zver:bleeding_health:value", self.bleedhealthwindow)
	
	self.restorehealthbar = xml:InitProgressBar("zver:progress_bar_health", self.dialog)

	

	self.weaponbar:Show(true)
	self.armorbar:Show(true)
	self.radhealthbar:Show(true)
	self.bleedhealthbar:Show(true)
	self.restorehealthbar:Show(true)
	
	--Hide disabled modules
	self:Refresh()

	
end

function UIZver:Clear()
	self.dialog:Show(false)
end

function UIZver:Refresh()
	self.ammowindow:Show(options.ammoshow)
	self.weaponwindow:Show(options.weaponshow)
	--printf("zver weaponshow refresh "..tostring(options.weaponshow))
	self.armorwindow:Show(options.armorbar)
	self.radhealthwindow:Show(options.radhealthshow)
	self.bleedhealthwindow:Show(options.bleedingbarshow)

end

function UIZver:Update(force)
	CUIScriptWnd.Update(self)
	
	local tg = time_global()
	if force then
		self._tmr = tg - 1
	end
	if self._tmr >= tg then

		return
	else
--	--printf("zver: we're on Update increment timer ")

		self._tmr = tg + tg_update_step
	end
		--printf("zver: we're on Update update ")

	local wpn = db.actor:active_item()
	local zoomed = wpn and ((IsWeapon(wpn) and wpn:weapon_is_scope()) or wpn:section() == "wpn_binoc_inv")   and axr_main.weapon_is_zoomed or false
	--printf("zver: we're on Update 189")

	
	-- Hide HUD when it's occupied by a GUI class or a growing list of other things that hide the engine controlled game hud
	if (not (main_hud_shown())) or (not db.actor:alive())  then
		self.dialog:Show(false)
	--printf("zver: we're on Update 195 ")

		return
	end
		--printf("zver: we're on Update 199 ")


	-- if there is an active item or if set to clear ammo for no active item
	-- this is broken right now. need to rethink.
	 
	if (not options.rememberammo)  then
			--printf("zver: we're on Update 203 ")

		self:UpdateAmmo()
	elseif wpn and IsWeapon(wpn) and (wpn:id() ~= self.lastwpn) or false then
		self:UpdateAmmo()
	end
			--printf("zver: we're on Update 207 ")

	self.lastwpn = wpn and IsWeapon(wpn) and wpn:id() or self.lastwpn	

--Update the armor bars
	--printf("zver: we're on Update increment armor bar ")

	local text = ""
	local cond = 0	
	local outfit = db.actor:item_in_slot(7)
	if outfit then
		cond = round(outfit:condition()*100)
		if options.armortext and (not (cond < 1)) then
			text = cond .. "%"
		end
	end
	self.armorbar:SetProgressPos(cond)
	self.armorwindow:TextControl():SetText(text)
	--printf("zver: we're on Update wpn bar")

	text = ""
	cond = 0
	--printf("zver weaponshow start "..tostring(weaponshow))
	if  wpn and IsWeapon(wpn) then
	--printf("zver weaponshow calulation "..tostring(weaponshow))
		cond = round(wpn:condition()*100)
		if options.weapontext and (not (cond < 1)) then
			text = cond .. "%"
		end
		self.weaponwindow:Show(options.weaponshow)
		self.weaponbar:SetProgressPos(cond)
		self.weaponwindow:TextControl():SetText(text)
	elseif options.weaponbarhide then
	--	printf("zver weaponshow noequip "..tostring(options.weaponshow))
		self.weaponwindow:Show(false)
	end

	self.radhealthbar:SetProgressPos(db.actor.radiation * 100)
	self.bleedhealthbar:SetProgressPos(db.actor.bleeding * 100)
	
	hprV = get_boost("HpRestore", true)
	hprP = get_boost("HpRestore", false)

	if (hprV and options.healingbar) then 
		self.restorehealthbar:SetProgressPos((db.actor.health + (hprV * hprP*6)) * 100)
	else
		self.restorehealthbar:SetProgressPos(0)

	end
	
	--printf("zver: before show")

	self.dialog:Show(true)
	--printf("zver: after show")

end

-- Broken off by itself because it only needs to be updated on reloads, weapon swaps, and UI changes.
function UIZver:UpdateAmmo()

--printf("zver: we're on UpdateAmmo ")
	if not options.ammoshow then return end --MODULE DISABLED
	
	local wpn = db.actor:active_item()
	if wpn and IsWeapon(wpn) and (not IsItem("fake_ammo_wpn",wpn:section())) then
		local ammo = zver_getammo(wpn)
		--
		if ammo[1] then
			self.third_ammo:TextControl():SetText(ammo[1][0])
			self.third_ammo:TextControl():SetTextColor( ammo[1][1])
			self.third_ammo:Show(true)
		else
			self.third_ammo:Show(false) -- Hide the text if there wasn't ammo to fill the table this far
		end
		
		if ammo[2] then
			self.ap_ammo:TextControl():SetText(ammo[2][0])
			self.ap_ammo:TextControl():SetTextColor( ammo[2][1])
			self.ap_ammo:Show(true)
		else
			self.ap_ammo:Show(false) -- Hide the text if there wasn't ammo to fill the table this far
		end
		
		if ammo[3] then
			self.fmj_ammo:TextControl():SetText(ammo[3][0])
			self.fmj_ammo:TextControl():SetTextColor( ammo[3][1])
			self.fmj_ammo:Show(true)
		else
			self.fmj_ammo:Show(false) -- Hide the text if there wasn't ammo to fill the table this far
		end

	else -- we have equiped something that doesn't have ammo so don't show ammo.
			self.third_ammo:Show(false)
			self.ap_ammo:Show(false)
			self.fmj_ammo:Show(false)

	end
end




-- make lists of the first three good and bad/old ammos count and color bright for equiped ammo dark for rest
-- If showbadammo is set and  good ammo is 0 and bad ammo is >0 bad ammo count and color will be placed in the list. (that means when both are 0 good ammo count and color is used)
-- based on the ui_ammo_wheel.script 
zver_cache_ammo = {} -- users don't change weapons much so keep a local list of the ammo to make lookup quicker.

function zver_getammo(obj)
		--printf("zver: we're on zver_getammo ")

	object    = obj
	id        = obj:id()
	section   = obj:section()
	ammo_type = obj:get_ammo_type() --the equipped ammo, ie ammo in the gun
	zver_ammo_inv = {}

	-- Collect weapon's ammo list
	if (not zver_cache_ammo[id]) then
		zver_cache_ammo[id] = utils_item.get_ammo(section, id)
		
		-- Cut anything with more than 9 ammo types (3 of each qaulity, currently 3 qualities, one is going away. change to 6 then) (sorry homemade buckshot no one loves you)
		if (#zver_cache_ammo[id] > 9) then
			for i=9, #zver_cache_ammo[id] do
				zver_cache_ammo[id][i] = nil
			end
		end
	end
	ammo_list = zver_cache_ammo[id]

	-- Collect all ammo in inventory
	empty_table(zver_ammo_inv)
	local function itr(temp, itm)
		local section = itm:section()
		if IsItem("ammo",section) then
			zver_ammo_inv[section] = (zver_ammo_inv[section] or 0) + itm:ammo_get_count()
		end
	end
	db.actor:iterate_inventory(itr, nil)
	
	local good_ammo = {}
	local old_ammo  = {} 
	local cntg = 3 -- count is decrementing so the table is reversed to line up the the top down order that makes sense to me, if i don't do this i get all kinds of bugs.
	local cntb = 3
	local ammonames = {"third_ammo","ap_ammo", "fmj_ammo"}
	
	
	for i=1,9 do
		local section = ammo_list[i]
		local found_bad = section and string.find(section,"bad") and true or false --old ammo in game is bad ammo in the ltx 
		local found_very = section and string.find(section,"very") and true or false -- broken ammo, it is going away but that won't break this check.
		if section and (not found_bad)  then
			good_ammo[cntg] = {}
			good_ammo[cntg][0] = (zver_ammo_inv[section] or 0)
			good_ammo[cntg][1] = ammo_type == (i - 1) and clr_list[ammonames[cntg] or "fmj_ammo"]["new"]["bright"] or clr_list[ammonames[cntg] or "fmj_ammo"]["new"]["dark"]
			cntg = cntg - 1
		elseif section and (not found_very) then
			old_ammo[cntb] = {}
			old_ammo[cntb][0] = (zver_ammo_inv[section] or 0)
			old_ammo[cntb][1] = ammo_type == (i - 1) and clr_list[ammonames[cntb] or "fmj_ammo"]["old"]["bright"] or clr_list[ammonames[cntb] or "fmj_ammo"]["old"]["dark"]
			cntb = cntb - 1	
		end
	end
	
	 local x = {
		options.oldammoshow and good_ammo[1] and old_ammo[1] and old_ammo[1][0] > 0 and good_ammo[1][0] == 0 and old_ammo[1] or good_ammo[1],
		options.oldammoshow and good_ammo[2] and old_ammo[2] and old_ammo[2][0] > 0 and good_ammo[2][0] == 0 and old_ammo[2] or good_ammo[2],
		options.oldammoshow and good_ammo[3] and old_ammo[3] and old_ammo[3][0] > 0 and good_ammo[3][0] == 0 and old_ammo[3] or good_ammo[3]} -- i described what this does at the top, no that that is not a redundant old_ammo[x] 
	return x
end






----------------------------------
--	Callbacks
----------------------------------

local function actor_on_first_update()
	--printf("zver: we're on actor_on_first_update")
	
	activate_hud()
	prepare_boosters_effect()

end

local function actor_on_update()
	--printf("zver: we're on actor_on_update")
	
	local tg = time_global()
	if tg < tg_update then
			--printf("zver: we're on actor_on_update no update")

		return
	end
		--printf("zver: we're on actor_on_update update")

	tg_update = tg + tg_update_step
	--adjust the actor status hud out of our way. 
	pos = actor_status.HUD and actor_status.HUD:GetWndPos()
	if pos and  pos.x ~= status_hud_x then
		pos.x = status_hud_x
		pos.y = status_hud_y
		actor_status.HUD:SetWndPos(pos)
		
	end
	pos = item_artefact.HUD and item_artefact.HUD:GetWndPos()
	if pos and  pos.y ~= -3.75 then
		pos.x = pos.x - 793.25
		pos.y = -3.75
		item_artefact.HUD:SetWndPos(pos)
		
	end
	
	scan_boosters_effect()
	
	if HUD then 
		HUD:Update(false) 
	end
end
function zverclear()
	if HUD then 	
		HUD:Clear()
	end
end


function module_toggle(mod)

	options[mod] = not options[mod];

	if HUD then
		HUD:Refresh()
	end
end

function get_setting(name)

return options[name]

end

function set_setting(name)


	val = axr_main.config:r_value("options", "video/hud/"..name,1)
printf("zver "..name..tostring(val))
	if (val ~= nil) then
		options[name] = val
	
	end

end



function inject_options_UI()
	--if MCM exists it already has these options.
	if ui_mcm then
		return
	end

	
	--make sure the options table exists
	if (#ui_options.options == 0) then
		ui_options.init_opt_base()
	end
	
	
--	t = ui_options.get_opt_table("video/hud") -- get the hud table
	id_1 = 0
	id_2 = 0
	for i=1, #ui_options.options do
		if ui_options.options[i].id == "video" then id_1 = i end
	end
	
	for i=1, #ui_options.options[id_1].gr do
		if (ui_options.options[id_1].gr[i].id == "hud") then id_2 = i end
	end
---	inject_options_to_table(t)
	inject_options_to_table(ui_options.options[id_1].gr[id_2].gr)
	
end

function on_mcm_load()
	t = {}
	inject_options_to_table(t)
	sh_options = { id= "zver"      	,sh=true 	 ,gr=t}
	
	return sh_options
end


function inject_options_to_table(t)
	table.insert(t, {id = "zverslide", type = "slide", link = "ui\\zver\\Banner.dds",size = {512,50}, text= "ui_mm_video_hud_zverslide"})
	table.insert(t, {id = "armorbar", type = "check", val = 1, def = options.armorbar,})
	table.insert(t, {id = "armortext", type = "check", val = 1, def = options.armortext,})
	table.insert(t, {id = "line", type = "line"})
	table.insert(t, {id = "weaponshow", type = "check", val = 1, def = options.weaponshow, })
	table.insert(t, {id = "weapontext", type = "check", val = 1, def = options.weapontext, })
	table.insert(t, {id = "weaponbarhide", type = "check", val = 1, def = options.weaponbarhide, })
	table.insert(t, {id = "line", type = "line"})

	table.insert(t, {id = "ammoshow", type = "check", val = 1, def = options.ammoshow, })
	table.insert(t, {id = "oldammoshow", type = "check", val = 1, options.oldammoshow, })
	table.insert(t, {id = "line", type = "line"})

	table.insert(t, {id = "radhealthshow", type = "check", val = 1, def = options.radhealthshow,})
	table.insert(t, {id = "bleedingbarshow", type = "check", val = 1, def = options.bleedingbarshow, })
	table.insert(t, {id = "healingbar", type = "check", val = 1, def = options.healingbar, })
end	



function on_game_start()

	inject_options_UI()
	loadsetting()
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("actor_on_update",actor_on_update)
	RegisterScriptCallback("actor_on_before_death",zverclear)
	RegisterScriptCallback("on_option_change", loadsetting)
	

	--add_console_command("zver_armorbar", function() module_toggle("armorbar") end )
end




function base_notify() end
	base_notify = actor_menu.set_notification

function monkey_notify(typ, texture, tm, snd)
	base_notify(typ, texture, tm, snd)
	local hud = get_hud()
	if(hud) then
		cs = hud:GetCustomStatic("notify_icon")
		pos = cs:wnd():GetWndPos()
		pos.x = notify_icon_x
		pos.y = notify_icon_y
		cs:wnd():SetWndPos(pos)
	end
end
actor_menu.set_notification	= monkey_notify




local active_boosters = {}
local boost_name = {}
function prepare_boosters_effect()
	boost_name = invert_table(BoosterID)
end
function scan_boosters_effect()
	for name,t in pairs(active_boosters) do
		t.value = nil
		t.period = nil
	end
	db.actor:cast_Actor():conditions():BoosterForEach( scan_current_booster_effect )
end
function scan_current_booster_effect(typ, period, value)
	active_boosters[ boost_name[typ] ] = { value=value , period=period }
end

function get_boost(name, time_only)
	if time_only then
		return active_boosters[name] and active_boosters[name].period
	end
	return active_boosters[name] and active_boosters[name].value
end




